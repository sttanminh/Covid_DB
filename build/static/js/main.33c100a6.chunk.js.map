{"version":3,"sources":["SIR.js","Feature3.js","Feature2.js","Feature1.js","App.js","reportWebVitals.js","index.js"],"names":["a","delta","run","cases","populationSize","deaths","vac_rate","day","i0","dailyCaseNumbers","length","i","reduce","sum","currentNum","findI0","s0","r0","d0","v","N","returnObject","Suv","Sv","Iuv","Iv","D","R","t","newCasesUnvaccinated","newCasesVaccinated","Math","round","covidSir","findS0","findR0","Feature3","data","theme","useState","covidData","setData","object","setObject","feature3Theme","setTheme","countryRef","useRef","vacRateRef","dayNumRef","SIRcal","country","vacRate","dataSIR","location","push","population","total_deaths","j","new_cases","UseData","Show","newCases","useEffect","obj","undefined","result","Object","keys","map","key","className","id","ref","type","name","min","max","list","dangerouslySetInnerHTML","__html","htmlCountryString","htmlCountryList","onClick","current","value","countrySelection","foundCountry","ob","alert","runEngine","Feature2","graphData","setGraphData","feature2Theme","startDateRef","endDateRef","defaultCountry","submit","userSelectedData","startDate","endDate","countryFound","startDateObject","Date","endDateObject","today","validation","createGraphData","dataObject","countryChosen","startDay","endDay","countryData","vaccination","vacTotal","death","dateRange","parse","date","hasOwnProperty","new_vaccinations","rate","new_deaths","dateLabelsUnformatted","element","dateLabels","toLocaleDateString","casesArray","labels","datasets","label","borderWidth","fill","borderColor","tension","yAxisID","xAxisID","padArrayWithDates","dates","dataArr","paddedData","forEach","timeButtonClick","todayString","toISOString","split","Array","prototype","call","document","getElementsByClassName","button","setAttribute","getElementById","disabled","weekBefore","setDate","getDate","monthBefore","setMonth","getMonth","yearBefore","setFullYear","getFullYear","dataToDisplay","options","plugins","title","display","text","fontSize","legend","position","elements","point","radius","scales","case_death","vaccinate","date_period","height","width","color","showGraph","defaultValue","Feature1","vicData","setVicData","feature1Theme","setStartDate","setEndDate","smoothingValue","setSmoothingValue","updateRange","e","popupShow","setPopupShow","togglePopup","valuetext","smoothness","startDateStrArr","toDateString","startDateStr","substr","endDateStrArr","endDateStr","inDateRange","average","fromIndex","toIndex","smoothedData","lowerRange","floor","upperRange","ceil","smoothData","dataBack","getYear","console","log","dataForward","end","setYear","processedData","dateString","pointBackgroundColor","Slider","size","getAriaValueText","valueLabelDisplay","onChange","marks","step","href","todayVicIndex","todayCaseVal","todayCaseDate","displayTodayInfo","App","VictoriaData","top_page","setTop","textColour","bkgColor","modeButton","setButton","themeButtonRef","fetch","then","response","json","catch","err","warn","window","scrollTo","style","backgroundColor","body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.33c100a6.chunk.js","sourcesContent":["// For more detailed explanation of this function, refer to the SIR model document\nconst k = 15;        // average duration of a COVID case\nconst a = 1/k;       // rates at which people either recover or die from COVID each date\nconst b = 1;         // number of contacts each infected individual makes per day\nconst delta = 0.01;  // COVID's death rates\nconst x = 0.98;       // percentage reduction of susceptibility to COVID for vaccinated individual\nconst y = 0.98;       // percentage reduction of death from COVID for vaccinated individual\nconst N = 100000     // population size. Write code to retrieve it here\n\n// Returns the number of active infections in both vaccinated and unvaccinated individuals. This is the sum all new cases in the last 15 days.\n// If the input list's length is shorter than 15, this is just the sum of the whole list. \nfunction findI0(dailyCaseNumbers) {\n    let i0 = 0;\n    if (dailyCaseNumbers.length > k) {\n        for (let i = dailyCaseNumbers.length-1; i > dailyCaseNumbers.length-1-k; i--) {\n            i0 += dailyCaseNumbers[i];\n        }\n    } else {\n        i0 = dailyCaseNumbers.reduce((sum, currentNum) => sum + currentNum);\n    }\n    return i0;\n}\n\n// Returns the starting value of the susceptible group, which includes both vaccinated susceptibles and unvaccinated susceptibles\n// This is the current population size - number of current infections\nfunction findS0(populationSize, i0) {\n    return populationSize - i0;\n}\n\n// Returns the number of recoveries since the beginning of the outbreak. \n// This is calculated by adding all the case number from the beginning of the outbreak to 15 days before today, then minus number of deaths so far\nfunction findR0(dailyCaseNumbers, deaths) {\n    let r0 = 0;\n    if (dailyCaseNumbers.length > k) {\n        for (let i = 0; i < dailyCaseNumbers.length-k; i++) {\n            r0 += dailyCaseNumbers[i];\n        }\n        r0 -= deaths;\n    } else {\n        r0 = 0;\n    }\n    return r0;\n}\n\n// Returns the number of deaths from the beginning of the outbreak.\nfunction findD0(deathNumbers) {\n    let d0 = deathNumbers.reduce((sum, currentNum) => sum + currentNum);\n    return d0;\n}\n\n\n// This function receives the inputs of S(0), I(0), R(0), D(0), number of days into the future the user wants to see, vaccination rate and the country's population size\n// Returns the predicted number of cases and deaths on that day in the future\nfunction covidSir(s0, i0, r0, d0, day, v, N) {\n    let returnObject = {}\n\n    // Declare and nitialise the arrays with their day 0 numbers\n    let Suv = [s0*(1-v)]\n    let Sv = [s0*v]\n    let Iuv = [i0]\n    let Iv = [0]\n    let D = [d0]\n    let R = [r0]\n\n    for (let t = 0; t < day; t++) {\n        // Number of new cases\n        let newCasesUnvaccinated =  b*(Iuv[t]+Iv[t])*Suv[t]/N;\n        newCasesUnvaccinated = newCasesUnvaccinated > Suv[t] ? 0 : newCasesUnvaccinated;\n        let newCasesVaccinated =  b*(Iuv[t]+Iv[t])*Sv[t]/N*(1-x);\n        newCasesVaccinated = newCasesVaccinated > Sv[t] ? 0 : newCasesVaccinated;\n\n        // Updating susceptible numbers:\n        Suv[t+1] = Suv[t] - newCasesUnvaccinated;\n        Sv[t+1] = Sv[t] - newCasesVaccinated;\n\n        // Updating infection numbers: \n        Iuv[t+1] = (Iuv[t] + newCasesUnvaccinated - a*Iuv[t]);\n        Iv[t+1] = (Iv[t] + newCasesVaccinated - a*Iv[t]);\n\n        // Updating recovery number: \n        R[t+1] = R[t] + a*Iuv[t]*(1-delta) + a*Iv[t]*(1-delta+delta*y);\n\n        // Updating death numbers\n        D[t+1] = D[t] + a*Iuv[t]*delta+ a*Iv[t]*delta*(1-y);\n\n        // console.log(`Date: ${t}`)\n        // console.log(`New case today: ${Math.round(newCasesUnvaccinated + newCasesVaccinated)}`);\n        // console.log(`New deaths: ${Math.round(D[t+1] - D[t])}`)\n        // console.log(`Susceptibles: ${Math.round(Suv[t+1] + Sv[t+1])}`)\n        // console.log(`Recoveries: ${Math.round(R[t+1])}`)\n        // console.log(`Current infections: ${Math.round(Iuv[t+1] + Iv[t+1])}\\n`)\n\n        // Update return object on the last day\n        if (t == day-1) {\n            returnObject[\"newCases\"] = Math.round(newCasesUnvaccinated + newCasesVaccinated);\n            returnObject[\"deaths\"] = Math.round(D[t+1] - D[t]);\n        }\n    }\n    return returnObject\n}\n\nexport function run(cases,populationSize,deaths,vac_rate,day){\n    let i0 = findI0(cases);\n    let s0 = findS0(populationSize, i0);\n    let r0 = findR0(cases, deaths);\n    let object = covidSir(s0, i0, r0, deaths, day, vac_rate, populationSize)\n\n    return object\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { run } from './SIR'\nimport \"./Feature3.scss\"\n\nexport default function Feature3({ data, theme }) {\n    const [covidData, setData] = useState()\n    const [object, setObject] = useState(null)\n    const [feature3Theme, setTheme] = useState(\"Feature3-light\")\n\n    const countryRef = useRef()\n    const vacRateRef = useRef()\n    const dayNumRef = useRef()\n\n    useEffect(() => {\n        var obj = data\n        if (data !== undefined) {\n            var result = Object.keys(obj).map((key) => [key, obj[key]]);\n        }\n        setData(result)\n    }, [data])\n\n    useEffect(() => {\n        if (theme === \"App-light\"){\n            setTheme(\"Feature3-light\")\n        }\n        else{\n            setTheme(\"Feature3-dark\")\n        }\n    }, [theme])\n\n    /**\n     * Looks through all data in covid data and retrieves only the population, deaths and cases \n     * data for the specific country\n     * \n     * @param {string} country string containing country of the data \n     * @returns array of population, deaths and daily cases data in its 0th ... 2nd index respectively\n     */\n    function UseData(country) {\n\n        data = []\n        for (let i = 0; i < covidData.length; i++) {\n            if (covidData[i][1].location === country) {\n                data.push(covidData[i][1].population)\n\n                // add deaths to data\n                data.push(covidData[i][1].data[covidData[i][1].data.length - 1].total_deaths)\n\n                // add cases to data\n                let cases = []\n                for (let j = 0; j < (covidData[i][1].data.length); j++) {\n                    cases.push(covidData[i][1].data[j].new_cases)\n                }\n                data.push(cases)\n            }\n        }\n        return data\n    }\n\n    /**\n     * Performs the calculations for the new cases and deaths for a specified day number for \n     * a given country with given vaccination rate. Uses the SIR model to perform the calculations. \n     * \n     * @param {string} country string of target country \n     * @param {number} vacRate vaccination rate for SIR model \n     * @param {number} day day number for SIR model\n     * @returns object with the result newCases and death as keys, both numbers\n     */\n    function SIRcal(country, vacRate, day) {\n        var dataSIR = UseData(country)\n        var population = dataSIR[0]\n        var deaths = dataSIR[1]\n        var cases = dataSIR[2]\n        let object = run(cases, population, deaths, vacRate / 100, day)\n        return object\n    }\n\n    /**\n     * Generates html string for dropdown box options of countries from available data\n     * \n     * @returns string containing the HTML element for the drop box of countries\n     */\n    function htmlCountryList() {\n        if (typeof covidData !== \"undefined\") {\n            let htmlCountryString = `<datalist id=\"countryList\">`\n            for (let i = 0; i < covidData.length; i++) {\n                htmlCountryString += `<option value=\"${covidData[i][1].location}\"></option>`\n            }\n            htmlCountryString += `</datalist>`\n            return htmlCountryString\n        }\n    }\n\n   /**\n    * Performs error checks for user input then calls the SIR calculation function and displays the output\n    */\n    function runEngine() {\n\n        // check if data loaded in yet\n        if (covidData === undefined) {\n            // data is not yet loaded\n            alert(\"No data yet, please try again shortly\")\n            return\n        }\n\n        let vacRate = vacRateRef.current.value\n        let day = dayNumRef.current.value\n        let countrySelection = countryRef.current.value\n\n        // Performing error checks for user input\n        if (vacRate !== undefined && vacRate !== null && vacRate >= 0 && vacRate <= 100 && vacRate.length !== 0) {\n            if (day !== undefined && day !== null && day.length !== 0) {\n                let foundCountry = false\n                for (let i = 0; i < covidData.length; i++) {\n                    if (covidData[i][1].location === countrySelection) {\n                        let population = covidData[i][1].population\n                        // alert(`Engine successfully ran!\n                        // Output: ${SIRcal(countrySelection, vacRate)}`)\n                        // engineOutput = `For the given vaccination rate of ${vacRate}% in the country ${countrySelection} there are '{SIRcal(countrySelection, vacRate)}' blah blah`\n                        foundCountry = true\n                        break\n                    }\n\n                }\n                if (!foundCountry) {\n                    alert(\"Your selected country is invalid or empty\")\n                    return\n                }\n            }\n            else {\n                alert(\"Your other input was invalid or empty\")\n                return\n            }\n        }\n        else {\n            alert(\"Your input was invalid or empty, please ensure the vaccination rate is given as a valid percentage. (eg. input '50' for 50%)\")\n            return\n        }\n        let ob = SIRcal(countrySelection, vacRate, day)\n        setObject(ob)\n    }\n\n    /**\n     * Creates the HTML elements for the the cases and death each day\n     * \n     * @returns HTML element for the graph\n     */\n    function Show() {\n        if (object !== null) {\n            return <div>\n                <h2>New cases each day: {object.newCases}</h2>\n                <h2>New death each day: {object.deaths}</h2>\n            </div>\n        }\n        else {\n            return null\n        }\n    }\n\n    return (\n        <div className={feature3Theme}>\n            <h1 className=\"feature-heading\"> Covid Engine</h1>\n            <br></br>\n\n            <div id=\"innerDiv3\">\n                <div id=\"innerLabelsDiv3\">\n                    <label className=\"input-label-3\">Vaccination Rate (%):</label>\n                    <br></br>\n                    <label className=\"input-label-3\">Day Number:</label>\n                    <br></br>\n                    <label className=\"input-label-3\">Country selection:</label>\n                </div>\n                <div id=\"innerInputsDiv3\">\n                    <input ref={vacRateRef} type=\"number\" id=\"inputVRate\" name=\"inputVRate\" className=\"input-field-3\" min=\"0\" max=\"100\"></input>\n                    <br></br>\n                    <input ref={dayNumRef} type=\"number\" id=\"inputNo2\" name=\"inputNo2\" className=\"input-field-3\" min=\"1\"></input>\n                    <br></br>\n                    <input ref={countryRef} list=\"countryList\" id=\"countrySelection\" name=\"countrySelection\" className=\"input-field-3\" />\n                    <div dangerouslySetInnerHTML={{ __html: htmlCountryList() }} />\n                </div>\n\n                <div id=\"buttonDiv3\">\n                    <button className=\"submit-button\" onClick={() => {\n                        runEngine()\n                    }}>Submit and Run</button>\n                </div>\n            </div>\n\n            <Show></Show>\n\n        </div>\n    )\n}\n","import { useState, useEffect, useRef } from 'react';\nimport \"./Feature2.scss\"\nimport { Line } from 'react-chartjs-2'\nimport Loader from \"react-loader-spinner\";\nexport default function Feature2({ data, theme }) {\n    const [covidData, setData] = useState()\n    const [graphData, setGraphData] = useState()\n    const [feature2Theme, setTheme] = useState(\"Feature2-light\")\n\n    const countryRef = useRef()\n    const startDateRef = useRef()\n    const endDateRef = useRef()\n\n    const defaultCountry = \"Australia\"\n\n    useEffect(() => {\n        var obj = data\n        if (data !== undefined) {\n            var result = Object.keys(obj).map((key) => [key, obj[key]]);\n        }\n        setData(result)\n    }, [data])\n\n    useEffect(() => {\n        if (theme === \"App-light\") {\n            setTheme(\"Feature2-light\")\n        }\n        else {\n            setTheme(\"Feature2-dark\")\n        }\n    }, [theme])\n\n    /**\n     * Looks through all data in covid data and retrieves only the case, death and vaccination of the \n     * specific country during the specified period of time.\n     * \n     * @param {string} country string containing country of the data \n     * @param {string} startDate string representing the starting date of the data, in the format (yyyy-mm-dd)\n     * @param {string} endDate string representing the end date of the data, in the format (yyyy-mm-dd)\n     * @returns an array of 3 arrays of objects. First array contains array of vaccination data, second contains deaths\n     * data and thrid contains daily cases data. \n     */\n    function UseData(country, startDate, endDate) {\n        data = []\n        for (let i = 0; i < covidData.length; i++) {\n            if (covidData[i][1].location === country) {\n                // add vaccination to data\n                let vaccination = []\n                let vacTotal = null\n                let death = []\n                let cases = []\n                let dateRange = false\n                if (startDate === \"\" || Date.parse(startDate) < Date.parse(covidData[i][1].data[0].date)) {\n                    dateRange = true\n                }\n                for (let j = 0; j < (covidData[i][1].data.length); j++) {\n\n                    if (covidData[i][1].data[j].date === startDate) {\n                        dateRange = true\n                    }\n                    if (covidData[i][1].data[j].date === endDate) {\n                        dateRange = false\n                    }\n                    if (dateRange) {\n                        if (covidData[i][1].data[j].hasOwnProperty(\"new_vaccinations\")) {\n                            vacTotal += covidData[i][1].data[j].new_vaccinations\n                            vaccination.push({ rate: (vacTotal * 100 / covidData[i][1].population) / 2, date: covidData[i][1].data[j].date })\n                        }\n                        if (covidData[i][1].data[j].hasOwnProperty(\"new_deaths\")) {\n                            death.push({ rate: covidData[i][1].data[j].new_deaths, date: covidData[i][1].data[j].date })\n                        }\n                        cases.push({ rate: covidData[i][1].data[j].new_cases, date: covidData[i][1].data[j].date })\n                    }\n                }\n                data.push(vaccination)\n                data.push(death)\n                data.push(cases)\n                break\n            }\n        }\n        return data\n    }\n\n    /**\n     * Generates html string for dropdown box options of countries from available data\n     * \n     * @returns string containing the HTML element for the drop box of countries\n     */\n    function htmlCountryList() {\n        if (typeof covidData !== \"undefined\") {\n            let htmlCountryString = `<datalist id=\"countryList\">`\n            for (let i = 0; i < covidData.length; i++) {\n                htmlCountryString += `<option value=\"${covidData[i][1].location}\"></option>`\n            }\n            htmlCountryString += `</datalist>`\n            return htmlCountryString\n        }\n    }\n\n    /**\n     * Runs when users click the [Submit] button. It retrieves inputs that the user has inputted\n     * in the input fields and checks that it is valid. If it is, it call createGraphData to create a \n     * data object for the new graph and updates this to the global variable graphData \n     */\n    function submit() {\n        // Ali's function called here, result is saved to dataFromUser\n        let userSelectedData = validation(countryRef.current.value, startDateRef.current.value, endDateRef.current.value)\n\n        if (userSelectedData === 0) {\n            alert(\"Data not ready, please wait a moment...\")\n\n        } else if (userSelectedData === 1) {\n            alert(\"Please select country from the drop down menu\")\n\n        } else if (userSelectedData === 2) {\n            alert(\"Please ensure start date and end date inputs are valid\")\n\n        } else {\n            setGraphData(createGraphData(userSelectedData))\n        }\n    }\n\n    /**\n     * Checks the validity of the data and if it's not valid, returns a different integer depending\n     * on the reason for the invaliidity, e.g. 2 for invalid date inputs, 0 for data not ready, 1 \n     * for country not found, etc.\n     * \n     * @param {string} country string containing country of the data \n     * @param {string} startDate string representing the starting date of the data, in the format (yyyy-mm-dd)\n     * @param {string} endDate string representing the end date of the data, in the format (yyyy-mm-dd)\n     * @returns an integer if the data is invalid and returns the array of data if it is valid\n     */\n    function validation(country, startDate, endDate) {\n        // check if data loaded in yet\n        if (covidData === undefined) {\n            // data not ready yet!\n            return 0\n        }\n\n        // country validation\n        let countryFound = false\n\n        for (let i = 0; i < covidData.length; i++) {\n            if (covidData[i][1].location === country) {\n                countryFound = true\n            }\n        }\n        if (countryFound === false) {\n            return 1\n        }\n\n        // date validation\n        let startDateObject = new Date(startDate);\n        let endDateObject = new Date(endDate);\n        let today = new Date();\n\n        if (startDateObject > today || endDateObject > today || startDateObject > endDateObject) {\n            // if start date or end date is in the future, or if start date is later than end date\n            return 2;\n        }\n\n        data = {\n            country: country,\n            startDate: startDate,\n            endDate: endDate\n        }\n        return data\n    }\n\n    /**\n     * Creates and return an object that has the formatted date labels, cases data array, deaths data \n     * array and vaccination rate data array ready to be graphed. It checks through the numbers and ensure \n     * the negative values are dealt with. If the argument dataObject is null, it will use the default \n     * country (Australia) as its location, else it'll use the specified country.\n     * \n     * @param {Object} dataObject \n     * @returns Object containing data in the format ready to be graphed using chartjs\n     */\n    function createGraphData(dataObject) {\n\n        let countryChosen = \"\";\n        let startDay = \"\";\n        let endDay = \"\"\n\n        if (dataObject === null) {\n            countryChosen = defaultCountry\n\n        } else {\n            countryChosen = dataObject.country  // Extract country name from dataObject here\n            startDay = dataObject.startDate\n            endDay = dataObject.endDate\n        }\n\n        let countryData = UseData(countryChosen, startDay, endDay)\n\n        if (countryData === []) {\n            alert(\"No data yet, please try again shortly\")\n            return\n        }\n\n        // get date labels from cases data \n        let dateLabelsUnformatted = countryData[2].map(element => element.date)\n\n        // Format date labels to dd/mm/yyyy \n        let dateLabels = dateLabelsUnformatted.map(element => {\n            let date = new Date(element)\n            return date.toLocaleDateString()\n        })\n\n        // for loop iterating through and inverting signs of erroneous negative case entries\n        let casesArray = countryData[2].map(element => element.rate)\n        for (let i = 0; i < casesArray.length; i++) {\n            if (casesArray[i] < 0) {\n                casesArray[i] = -casesArray[i]\n            }\n        }\n        let deathsArray = padArrayWithDates(dateLabelsUnformatted, countryData[1])\n        let vaccArray = padArrayWithDates(dateLabelsUnformatted, countryData[0])\n\n        let dataForGraph = {\n            labels: dateLabels,\n            datasets: [{\n                label: 'New cases',\n                data: casesArray,\n                borderWidth: 1,\n                fill: false,\n                borderColor: 'rgb(255, 0, 0)',\n                tension: 1,\n                yAxisID: 'case_death',\n                xAxisID: 'date_period'\n            }, {\n                label: 'Deaths',\n                data: deathsArray,\n                borderWidth: 1,\n                fill: false,\n                borderColor: 'rgb(0, 0, 255)',\n                tension: 0.1,\n                yAxisID: 'case_death',\n            }, {\n                label: 'Vaccination rate',\n                data: vaccArray,\n                borderWidth: 1,\n                fill: false,\n                borderColor: 'rgb(0, 255, 0)',\n                tension: 0.1,\n                yAxisID: 'vaccinate',\n            }\n            ]\n        }\n        return dataForGraph\n    }\n\n    /**\n     * Prepares the data so that for dates where the data is not recoreded, it will pad it with a null \n     * so that the data it can still be graphed for every date in the dates array. \n     * \n     * @param {string[]} dates array of all dates that needs to be graphed\n     * @param {object[]} dataArr array with data to be padded\n     * @returns new array of data that has the same length as the dates array\n     */\n    function padArrayWithDates(dates, dataArr) {\n        let paddedData = []\n        let dataObject = {}\n        dataArr.forEach(death => {\n            dataObject[death.date] = death.rate\n        })\n        dates.forEach(date => {\n            if (dataObject[date] === undefined) {\n                paddedData.push(null)\n            } else {\n                paddedData.push(dataObject[date])\n            }\n        })\n        return paddedData\n    }\n\n    /**\n     * Creates the HTML elements for the graph and shows it on the page\n     * \n     * @returns HTML element for the graph\n     */\n    function showGraph() {\n\n        if (covidData !== undefined) {\n            let dataToDisplay = {}\n            if (graphData === undefined) {\n                dataToDisplay = createGraphData(null)\n            } else {\n                dataToDisplay = graphData\n            }\n\n            let country = countryRef.current.value\n\n            if (country === \"\") {\n                country = defaultCountry\n            }\n\n            return <Line\n                data={dataToDisplay}\n                options={{\n                    plugins: {\n                        title: {\n                            display: true,\n                            text: `Cases, Deaths, Vaccination Rate for ${country} against time`,\n                            fontSize: 20\n                        },\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    },\n                    elements: {\n                        point: {\n                            radius: 0.1\n                        }\n                    },\n                    scales: {\n                        case_death: {\n                            display: true,\n                            position: 'left',\n                            type: 'linear',\n                            min: 0,\n                            title: {\n                                display: true,\n                                text: 'New Cases/Deaths (per day)'\n                            }\n                        },\n                        vaccinate: {\n                            display: true,\n                            position: 'right',\n                            type: 'linear',\n                            min: 0,\n                            max: 100,\n                            title: {\n                                display: true,\n                                text: 'Vaccination Rate (%)'\n                            }\n                        },\n                        date_period: {\n                            display: true,\n                            position: 'bottom',\n                            title: {\n                                display: true,\n                                text: 'Date (dd/mm/yyyy)'\n                            }\n                        }\n                    }\n                }}\n\n                // radio of height and width\n                height={11}\n                width={10}\n            ></Line>\n        } else {\n            return <div className =\"loading-icon\">\n                \n                \n            <div className = \"loading-div\">\n                <Loader\n                    margin-top= \"5cm\"\n                    type=\"Oval\"\n                    color=\"#a6a6a6\"\n                    height={70}\n                    width={70}></Loader>\n            </div>\n        </div>\n        }\n    }\n\n    /**\n     * Changes the inputs to the dates fields depending on the button pressed and the colours of the buttons. \n     * \n     * E.g. pressing the [Last Week] button will set the start date to 7 days ago and the end date to today. \n     * It enables the date input fields if [Other] is chosen. It also changes colour of the pressed button \n     * and the other non-chosen buttons back to the usual colour to indiate which has been pressed.\n     * \n     * @param {string} id id of the time button pressed\n     */\n    function timeButtonClick(id) {\n\n        const today = new Date();\n        const todayString = today.toISOString().split(\"T\")[0]; // format of yyyy-mm-dd\n\n        // set all button colours to normal\n        Array.prototype.forEach.call(document.getElementsByClassName(\"time-sel-button-2\"), (button) => {\n\n            button.setAttribute(\"style\", \"background-color:rgb(131, 143, 255)\")\n        })\n        // set colour of pressed button to different\n        document.getElementById(id).setAttribute(\"style\", \"background-color:#5ad3af9a\")\n\n        // if other is pressed, enable date input, else disable\n        if (id === \"otherButton\") {\n\n            startDateRef.current.disabled = false;\n            startDateRef.current.max = todayString;\n            endDateRef.current.disabled = false;\n            endDateRef.current.max = todayString;\n\n        } else {\n            startDateRef.current.disabled = true;\n            endDateRef.current.disabled = true;\n        }\n\n        // depending on which button pressed, prefills/displays different dates\n        switch (id) {\n            case \"weekButton\":\n                let weekBefore = new Date()\n                weekBefore.setDate(today.getDate() - 7);\n\n                startDateRef.current.value = weekBefore.toISOString().split(\"T\")[0];\n                endDateRef.current.value = todayString;\n\n                break;\n            case \"monthButton\":\n                let monthBefore = new Date();\n                monthBefore.setMonth(today.getMonth() - 1);\n\n                startDateRef.current.value = monthBefore.toISOString().split(\"T\")[0];\n                endDateRef.current.value = todayString;\n\n                break;\n            case \"yearButton\":\n                let yearBefore = new Date();\n                yearBefore.setFullYear(today.getFullYear() - 1);\n\n                startDateRef.current.value = yearBefore.toISOString().split(\"T\")[0];\n                endDateRef.current.value = todayString;\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div className={feature2Theme}>\n            <h1 className=\"feature-heading\">Graphs by Country</h1>\n\n            <br></br>\n            <div id=\"leftGraph2\">\n                {showGraph()}\n            </div>\n\n            <div id=\"rightOptions2\">\n                <h3>Options</h3>\n                <label className=\"input-label-2\">Country selection: </label>\n                <input ref={countryRef} list=\"countryList\" id=\"countrySelection\" name=\"countrySelection\" className=\"input-field-2\" defaultValue={defaultCountry} />\n                <div dangerouslySetInnerHTML={{ __html: htmlCountryList() }} />\n\n                <label className=\"input-label-2\">Time Period: </label>\n                <br></br>\n                <button className=\"time-sel-button-2\" id=\"weekButton\" onClick={() => { timeButtonClick(\"weekButton\"); }}>Past Week</button>\n                <button className=\"time-sel-button-2\" id=\"monthButton\" onClick={() => { timeButtonClick(\"monthButton\"); }}>Past Month</button>\n                <button className=\"time-sel-button-2\" id=\"yearButton\" onClick={() => { timeButtonClick(\"yearButton\"); }}>Past Year</button>\n                <button className=\"time-sel-button-2\" id=\"otherButton\" onClick={() => { timeButtonClick(\"otherButton\"); }}>Other</button>\n                <br></br>\n\n                <label className=\"small-label-2\">From: </label>\n                <input ref={startDateRef} disabled className=\"date-field-2\" id=\"fromDate\" type=\"date\" />\n                <br></br>\n                <label className=\"small-label-2\">Until: </label>\n                <input ref={endDateRef} disabled className=\"date-field-2\" id=\"toDate\" type=\"date\" />\n\n                <div id=\"graphOptions2\">\n                    <p>\n                        Click on the <span className=\"highlight-red\">legend</span> above the graph to show/hide graphs.\n                        If any of <span className=\"highlight-blue\">cases</span>, <span className=\"highlight-blue\">deaths </span>\n                        or <span className=\"highlight-blue\">vaccination rate </span> lines do not show up,\n                        it means there is no data available.\n                    </p>\n                </div>\n\n                <button className=\"submit-button\" onClick={() => {\n                    submit()\n                }}> Submit</button>\n            </div>\n        </div>\n    )\n}\n","import { useState, useEffect, useRef } from 'react';\nimport './Feature1.scss'\nimport { Line } from 'react-chartjs-2'\nimport { IoIosArrowRoundBack, IoIosArrowRoundForward } from \"react-icons/io\";\nimport { BsFillQuestionCircleFill } from \"react-icons/bs\";\nimport { Slider } from '@material-ui/core'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Loader from \"react-loader-spinner\";\nimport 'react-tabs/style/react-tabs.css';\n\nexport default function Feature1({ data, theme }) {\n    const [vicData, setVicData] = useState()\n    const [feature1Theme, setTheme] = useState(\"Feature2-light\")\n\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [smoothingValue, setSmoothingValue] = useState(1)\n    const updateRange = (e, data) => { setSmoothingValue(data) }\n\n    const [popupShow, setPopupShow] = useState(false)\n\n    function togglePopup() {\n        setPopupShow(!popupShow)\n    }\n\n    function displayTodayInfo() {\n\n        if (vicData !== undefined) {\n\n            let todayVicIndex = vicData.length - 1\n            let todayCaseVal = vicData[todayVicIndex].cases\n\n            if (todayCaseVal == null) {\n                todayVicIndex = todayVicIndex - 1\n                todayCaseVal = vicData[todayVicIndex].cases\n            }\n\n            let todayCaseDate = vicData[todayVicIndex].date\n\n            return <div className=\"todayVicCases\">\n                <p id=\"titlingLine\">Number of cases:</p>\n                <p id=\"caseNumber\">{todayCaseVal}</p>\n                <p id=\"dateLine\">As recorded on: &nbsp;(<i>{todayCaseDate}</i>)</p>\n                <BsFillQuestionCircleFill onClick={togglePopup} className=\"infoIcon\"></BsFillQuestionCircleFill>\n\n                {popupShow && <div className=\"popupThing\">\n                    <div className=\"popupOverlay\" onClick={togglePopup}>\n                        <div className=\"popupContent\">\n                            This data was sourced from the <br></br>\n                            <a href=\"https://www.coronavirus.vic.gov.au/victorian-coronavirus-covid-19-data\">Victorian Government (COVID-19 Data).</a>\n                        </div>\n                    </div>\n                </div>}\n            </div >\n        }\n        else {\n            return <div className=\"loading-icon\">\n\n\n                <div className=\"loading-div\">\n                    <Loader\n                        margin-top=\"5cm\"\n                        type=\"Oval\"\n                        color=\"#a6a6a6\"\n                        height={70}\n                        width={70}></Loader>\n                </div>\n            </div>\n        }\n    }\n\n    function valuetext(value) {\n        return `${value}`;\n    }\n\n\n    useEffect(() => {\n        if (theme === \"App-light\") {\n            setTheme(\"Feature1-light\")\n        }\n        else {\n            setTheme(\"Feature1-dark\")\n        }\n    }, [theme])\n\n    useEffect(() => {\n        setVicData(data)\n    }, [data])\n    useEffect(() => {\n        let today = new Date()\n        let startDay = new Date()\n        // console.log(today,startDay)\n        if (today.getMonth() < 6) {\n            startDay.setMonth(startDay.getMonth() - 6)\n            startDay.setYear(startDay.getYear() - 1)\n        }\n        else {\n            startDay.setMonth(startDay.getMonth() - 6)\n        }\n        setStartDate(startDay)\n        setEndDate(today)\n        //console.log(startDate,endDate)\n\n    }, [])\n\n    /**\n     * Receives a startDay, endDay input strings and smoothness value then extracts the specified data from vicData\n     * \n     * @param {string} startDate start date of the data to be taken, in the format (yyyy-mm-dd)\n     * @param {string} endDate last date of the data to be taken, in the format (yyyy-mm-dd)\n     * @param {number} smoothness a smoothness level between 1 (not smoothed) to 7 (smoothed by 7 days)\n     * @returns array of cases per day for victoria already smoothed\n     */\n    function UseData(startDate, endDate, smoothness) {\n        data = []\n\n        let startDateStrArr = new Date(startDate).toDateString().split(\" \");\n        let startDateStr = startDateStrArr[2] + \" \" + startDateStrArr[1] + \" \" + startDateStrArr[3].substr(2, 2);\n        let endDateStrArr = new Date(endDate).toDateString().split(\" \");\n        let endDateStr = endDateStrArr[2] + \" \" + endDateStrArr[1] + \" \" + endDateStrArr[3].substr(2, 2);\n\n        let inDateRange = false;\n\n        for (let i = 0; i < vicData.length; i++) {\n            if (vicData[i].date === startDateStr) {\n                inDateRange = true\n            } else if (vicData[i].date === endDateStr) {\n                break;\n            }\n\n            if (inDateRange && vicData[i].cases !== null) {\n                data.push(vicData[i])\n            }\n        }\n\n        return smoothData(data, smoothness)\n    }\n\n\n\n    /**\n     * Smooths out the data at each date by averaging it with the data before and after the date\n     * the range of this is specified by the smoothness.\n     * \n     * @param {object[]} data array of data, each element is an object\n     * @param {number} smoothness a smoothness level between 1 (not smoothed) to 7 (smoothed by 7 days)\n     * @return the data that has been smoothed\n     */\n\n    function smoothData(data, smoothness) {\n\n        const average = (fromIndex, toIndex) => {\n            let sum = 0;\n            for (let i = fromIndex; i < toIndex; i++) {\n                sum += data[i].cases\n            }\n            return sum / (toIndex - fromIndex)\n        }\n\n        let smoothedData = []\n\n        let lowerRange = Math.floor(smoothness / 2);\n        let upperRange = Math.ceil(smoothness / 2);\n        for (let i = lowerRange; i <= data.length - upperRange; i++) {\n            smoothedData.push({ ...data[i], cases: average(i - lowerRange, i + upperRange) })\n        }\n\n        return smoothedData\n    }\n\n    /**\n     * Creates the HTML elements for the graph and shows it on the page\n     * \n     * @returns HTML element for the graph\n     */\n    function showGraph() {\n\n\n        if (vicData !== undefined) {\n            let dataToDisplay = createGraphData()\n            return <div>\n                <Line\n                    data={dataToDisplay}\n                    options={{\n                        plugins: {\n                            title: {\n                                display: true,\n                                text: ``,\n                                fontSize: 20\n                            },\n                            legend: {\n                                display: false,\n                            }\n                        },\n                        elements: {\n                            point: {\n                                radius: 2\n                            }\n                        },\n                        scales: {\n                            case_death: {\n                                display: true,\n                                position: 'left',\n                                type: 'linear',\n                                min: 0,\n                                title: {\n                                    display: true,\n                                    text: 'New Cases/Day'\n                                }\n                            },\n                            date_period: {\n                                display: true,\n                                position: 'bottom',\n                                title: {\n                                    display: true,\n                                    text: 'Date (dd/mm/yyyy)'\n                                }\n                            }\n\n                        }\n                    }}\n\n                    // radio of height and width\n                    height={36}\n                    width={50}\n                ></Line>\n\n                <div>\n                    <div className=\"arrows\">\n                        <IoIosArrowRoundBack onClick={dataBack} className=\"arrow-icon\"></IoIosArrowRoundBack>\n                        <IoIosArrowRoundForward onClick={dataForward} className=\"arrow-icon\"></IoIosArrowRoundForward>\n                    </div>\n                    <div className=\"slider\">\n                        <Slider\n                            size=\"10cm\"\n                            color=\"secondary\"\n                            aria-label=\"smoothing\"\n                            defaultValue={1}\n                            getAriaValueText={valuetext}\n                            valueLabelDisplay=\"auto\"\n                            value={smoothingValue}\n                            onChange={updateRange}\n                            marks\n                            step={1}\n                            min={1}\n                            max={7}\n                        />\n\n                    </div>\n\n                    <div className=\"sliderInfoPopup\"><BsFillQuestionCircleFill onClick={togglePopup} color='grey' className=\"infoIcon\"></BsFillQuestionCircleFill>\n                        {popupShow && <div className=\"popupThing\">\n                            <div className=\"popupOverlay\" onClick={togglePopup}>\n                                <div className=\"popupContent\">\n                                    This is a graph of daily COVID cases in Victoria,\n                                    <br></br>\n                                    since April 9th 2020. Our graph displays data over a range of 6 months,\n                                    for make smaller day-to-day fluctuations more visible to the user.\n                                    <br></br>\n                                    <br></br>\n                                    The pink sliding scale is available to smooth data using moving averages (of our own calculations), ranging from\n                                    <br></br>\n                                    1 - 7.\n                                    <br></br>\n                                    <p className=\"covidReference\">This data was sourced from the <br></br>\n                                    <a href=\"https://www.coronavirus.vic.gov.au/victorian-coronavirus-covid-19-data\">Victorian Government (COVID-19 Data).</a></p>\n                                </div>\n                            </div>\n                        </div>}\n                    </div>\n\n                </div>\n\n            </div>\n        } else {\n            return <div className=\"loading-icon\">\n\n\n                <div className=\"loading-div\">\n                    <Loader\n                        margin-top=\"5cm\"\n                        type=\"Oval\"\n                        color=\"#a6a6a6\"\n                        height={70}\n                        width={70}></Loader>\n                </div>\n            </div>\n        }\n    }\n\n\n    /**\n     * Creates and return an object that has the formatted date labels, and cases data array ready to be \n     * \n     * @param {Object} dataObject \n     * @returns Object containing data in the format ready to be graphed using chartjs\n     */\n    function createGraphData() {\n\n        let processedData = UseData(startDate, endDate, smoothingValue)\n\n        // get date labels and number of cases from\n        let dateLabels = []\n        let casesArray = []\n\n        processedData.forEach(element => {\n            let dateString = element.date\n            dateLabels.push(new Date(dateString).toLocaleDateString())\n            casesArray.push(element.cases)\n        })\n\n        let dataForGraph = {\n            labels: dateLabels,\n            datasets: [{\n                label: 'New cases',\n                data: casesArray,\n                borderWidth: 1,\n                fill: false,\n                borderColor: 'rgb(0, 0, 0)',\n                pointBackgroundColor: 'rgb(0, 0, 0)',\n                tension: 1,\n                yAxisID: 'case_death',\n                xAxisID: 'date_period'\n            }]\n        }\n        return dataForGraph\n    }\n\n    /**\n     * \n     */\n    function dataBack() {\n\n        if (startDate.getYear() >= 120) {\n\n            console.log(\"in\")\n\n            let startDay = startDate\n            startDay.setMonth(startDay.getMonth() - 6)\n\n            let endDay = endDate\n            endDay.setMonth(endDay.getMonth() - 6)\n\n            setEndDate(new Date(endDay))\n            setStartDate(new Date(startDay))\n\n        }\n    }\n\n    /**\n     * \n     */\n    function dataForward() {\n\n        let today = new Date()\n        let end = new Date(endDate)\n\n        console.log(end)\n\n        end.setMonth(end.getMonth() + 4)\n\n        if (end <= today) {\n\n            let startDay = startDate\n            startDay.setMonth(startDay.getMonth() + 6)\n\n            let endDay = endDate\n            endDay.setMonth(endDay.getMonth() + 6)\n\n            setEndDate(new Date(endDay))\n            setStartDate(new Date(startDay))\n\n        }\n    }\n\n    return (\n        <div className={feature1Theme}>\n\n            <h1 className=\"feature-heading\">COVID-19 in Victoria</h1>\n            <Tabs>\n                <TabList>\n                    <Tab> Victoria's Data Graph</Tab>\n                    <Tab> Victoria's Daily New cases </Tab>\n                </TabList>\n                <TabPanel>\n                    <div id=\"graph1\">\n                        {showGraph()}\n                    </div>\n                </TabPanel>\n                <TabPanel>\n                    {displayTodayInfo()}\n                </TabPanel>\n            </Tabs>\n        </div>\n    )\n\n};\n\n","import './App.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport Feature3 from './Feature3'\nimport Feature2 from './Feature2';\nimport Feature1 from './Feature1';\n\nfunction App() {\n  const [data, setData] = useState()\n  const [VictoriaData, setVicData] = useState()\n  const [theme, setTheme] = useState(\"App-light\")\n  const [top_page, setTop] = useState(0)\n  const [modeButton, setButton] = useState({ text: \"Light Mode\", textColour: \"black\", bkgColor: \"#ffdc3e\" })\n  const themeButtonRef = useRef()\n\n  useEffect(() => {\n    fetch('https://covid.ourworldindata.org/data/owid-covid-data.json')\n      .then(response => response.json())\n      .then(data => {\n        setData(data)\n        console.log(data)\n      });\n  }, [])\n\n  useEffect(() => {\n    console.log(\"before fetch\")\n    fetch('https://covid-db-2021.herokuapp.com//victoria-cases')\n      .then(response => response.json())\n      .then(data => {\n        setVicData(data)\n        console.log(data)\n      })\n      .catch(function (err) {\n        // There was an error\n        console.warn('Something went wrong.', err);\n      });\n  }, [])\n  useEffect(() => {\n    window.scrollTo(0, 0)\n\n  }, [top_page])\n  /**\n   * Changes the theme of the app when the button is clicked\n   */\n  function nightButton() {\n    if (theme === \"App-light\") {\n      // direct DOM access to change bkg colour\n      document.body.style = \"background: #161716\"\n      setTheme(\"App-dark\");\n      setButton({ text: \"Dark Mode\", textColour: \"white\", bkgColor: \"#38218f\" });\n    } else {\n      setTheme(\"App-light\");\n      document.body.style = \"background: white\"\n      setButton({ text: \"Light Mode\", textColour: \"black\", bkgColor: \"#ffdc3e\" });\n    }\n  }\n  function top(){\n    if (top_page == 1){\n      setTop(0)\n    }\n    else{\n      setTop(1)\n    }\n  }\n  return (\n    <div className={theme}>\n\n      <Feature3 data={data} theme={theme}></Feature3>\n\n      <Feature2 data={data} theme={theme}></Feature2>\n\n      <Feature1 data={VictoriaData} theme={theme}></Feature1>\n      <button ref={themeButtonRef} style={{ color: modeButton.textColour, backgroundColor: modeButton.bkgColor }}\n        id=\"themeButton\" onClick={() => { nightButton() }}>{modeButton.text}</button>\n      <button className= \"topButton\" ref={themeButtonRef} style={{ color: modeButton.textColour, backgroundColor: modeButton.bkgColor }}\n  onClick={() => { top() }}>Top</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"headerDiv\">\n      <h1 id=\"mainHeading\">Covid Dashboard</h1>\n    </div>\n\n    <App />\n\n    <div id=\"footerDiv\"></div>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}